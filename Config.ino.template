
// This file contains user settings for ArduHeater.
//
// You can find usage instructions in the ArduHeater.ino file.


// Your Cosm API key. Note: this is sensitive data.
const char* APIKEY = "klsdhfsio48ytboir56s48o5sbtjoritusjole5i6usep5ot"; // this is a bunch of random letters that look like an API key

// Your Cosm feed ID.
const unsigned long FEEDID = 12345L;

// The time zone the heater is living in.
const unsigned long TIME_ZONE_DIFFERENCE = 2 * 3600; // UTC+2 (Rome, w/ daylight savings)


// Every day, the heater will be turned on in the following range.
const int HEATING_BEGIN_MINS = 6 *60 + 00;  // 6:00 AM
const int HEATING_END_MINS   = 9 *60 + 00;  // 9:00 AM


// The temperature of the water inside and outside the heating period above, respectively.
const int HOT_WATER_TEMP_H  = 5000;         // 50°C
const int COLD_WATER_TEMP_H = 1500;         // 15°C



/******************
 * Hardware configuration
 ******************/

// The pin where the DS18S20 sensor is connected.
const byte DS18S20_PIN = A0;

// The pin where the relay (which turns on and off the heater)
// is connected.
const byte RELAY_PIN = 2;

// These pins control the shift register for the 7-seg display.
// The board is an old project of mine called "PICtimer".
// The schematic PDF is on this directory.
// It has four common-cathode 7-seg displays, and only four pins
// are needed to control them all (a fifth pin is needed to handle
// the four onboard buttons).
// The board originally contained a PIC16F84A mounted in a socket;
// to be able to use it into ArduHeater, I removed the PIC and
// connected the interesting pins to the Arduino.
// The following table of constants, along with the side comments,
// tells how to connect the Arduino to the PIC-less board.
const byte SDATA_PIN = 7;   // to be connected to pin 9 (RB3) of IC1
const byte SCLK_PIN = 3;    // to be connected to pin 8 (RB2) of IC1
const byte RCLK_PIN = 6;    // to be connected to pin 7 (RB1) of IC1
const byte DRES_PIN = 5;    // to be connected to pin 10 (RB4) of IC1
const byte KEYS_PIN = A2;   // to be connected to pin 17 (RA0) of IC1



// The following constants can be used if you want to control an
// HD44780-like display. The display I used was mounted in a board
// called "Evoluzione 2000" that was going to be trashed. It had a
// microcontroller mounted on a socket, and a simple D/A converter to
// control the LCD contrast. The microcontroller was connected
// directly to the LCD, and it had a "latch" pin to control the DAC.
// I don't currently use any LCD, because 7-seg displays are easier
// to read at long distance.

const byte D7_PIN = 5;
const byte D6_PIN = 7;
const byte D5_PIN = 3;
const byte D4_PIN = 6;
const byte RS_PIN = 8;
const byte EN_PIN = 9;
const byte CONTRAST_PIN = A3;

const byte DEFAULT_CONTRAST = 7;
